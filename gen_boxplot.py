import csv
import matplotlib.pyplot as plt
import statistics

import matplotlib as mpl
import matplotlib.pyplot as plt
import numpy as np
import seaborn as sns

import os

# This script reads the CSV files generated by nanonet_batch.py and plots the results as a Boxplot.
# TODO (eventually): set filename of the CSV
CSV_FILENAME = 'batch_result001.csv'

# Plotting parameters
algo_c_map = {
	'UnitWeights': "grey",
	'InverseCapacity': "lightsteelblue",
	'HeurOSPF': "cornflowerblue",
	'ILP Weights': "royalblue",	# 'ValiantsTrick': "plum",
	'GreedyWaypoints': "hotpink",
	'ILP Waypoints': "mediumvioletred",
	'JointHeur': "aquamarine",
	'ILP Joint': "mediumseagreen",
	'LLLP': "blue",
	# 'DUO DemandFirst HeurOSPF': "mediumaquamarine",
}

plt.style.use('ggplot')
SMALL_SIZE = 17
MEDIUM_SIZE = 20
BIGGER_SIZE = 22
plt.rc('font', size=SMALL_SIZE)  # controls default text sizes
plt.rc('font', family='serif')  # controls default text sizes
plt.rc('axes', titlesize=SMALL_SIZE)  # fontsize of the axes title
plt.rc('axes', labelsize=SMALL_SIZE)  # fontsize of the x and y labels
plt.rc('xtick', labelsize=SMALL_SIZE)  # fontsize of the tick labels
plt.rc('ytick', labelsize=SMALL_SIZE)  # fontsize of the tick labels
plt.rc('legend', fontsize=SMALL_SIZE)  # legend fontsize
plt.rc('figure', titlesize=BIGGER_SIZE)  # fontsize of the figure title


# Generate actual plot.
def box_plot_all_top(df_plot, x_label="Model\n", y_label="\nMax. Normalized Link Utilization", size=(30, 6), title=None, y_lim_top=None):
	fig, ax = plt.subplots(figsize=(10,4))
	flier_props = dict(markersize=1, linestyle='none')
	sns.boxplot(data=df_plot, ax=ax, linewidth=0.5, flierprops=flier_props, orient='h')#, palette=algo_c_map)
	plt.xlabel(y_label, weight='bold', fontsize=MEDIUM_SIZE)
	plt.ylabel(f'{x_label}', weight='bold', fontsize=MEDIUM_SIZE)
	if title:
		plt.title(title)
	ax.set_facecolor('white')
	ax.grid(linestyle=':', color='grey', linewidth=0.5)
	#ax.get_legend().remove()
	x_grid_lines = ax.get_xgridlines()
	if y_lim_top:
		plt.ylim(0.8, y_lim_top)
	for y_line in x_grid_lines:
		y_line.set_color('white')
	plt.xticks(rotation=0)
	#plt.savefig(file_name.replace(" ", ""), bbox_inches="tight", format='pdf')
	#plt.close()
	#print(file_name)
	plt.yticks([0,1,2],['Joint','Weights', 'LLLF'])
	plt.tight_layout()
	plt.grid()
	# plt.show()
	plt.savefig('result.png')
	return

# Read the CSV file and filter for a test set (e.g. only JOINT tests)
def read_csv_data(filename : str, filter_filename : str):
	with open(filename, 'r') as csvfile:
		csvreader = csv.reader(csvfile, delimiter=';')
		return list(map( lambda row: float(row[2]) , filter( lambda row: row[1].strip() == filter_filename, csvreader ) ))

for path, subdirs, files in os.walk("."):
	for file_name in files:
		if file_name == CSV_FILENAME:
			os.chdir(path)

			data_joint   = read_csv_data(file_name, "Joint.topo.sh")
			data_weights = read_csv_data(file_name, "Weights.topo.sh")
			data_lllf = read_csv_data(file_name, "LLLF.topo.sh")

			data_all = [data_joint, data_weights, data_lllf]

			box_plot_all_top(data_all)

			# Statistical data printed to stdout
			if len(data_joint) > 0:
				print("JOINT Median: ", statistics.median(data_joint))
				print("JOINT Minimum: ", min(data_joint))
				print("JOINT Maximum: ", max(data_joint))
			if len(data_weights) > 0:
				print("WEIGHTS Median: ", statistics.median(data_weights))
				print("WEIGHTS Minimum: ", min(data_weights))
				print("WEIGHTS Maximum: ", max(data_weights))
			if len(data_lllf) > 0:
				print("LLLF Median: ", statistics.median(data_lllf))
				print("LLLF Minimum: ", min(data_lllf))
				print("LLLF Maximum: ", max(data_lllf))

			os.chdir("../")
